A Trie is a tree-based data structure that organizes information in a hierarchy. Mostly used on strings.
Enable fast look-up's of strings. Very efficient for prefix matching in english language.
It can have any number of children. In a node we can store any number of non-repetative characters.

Properties:
-It is typically used to store or search strings in a space and time efficient way.
-Any node in trie can store non repetative multiple characters.
-Every node stores link of the next character of the string.
-Every node keeps track of 'end of string'.


Node structure:-
---------------------------------
            Map
---------------------------------
characters  |  Link to trie Node
---------------------------------
            |
            |
            |
---------------------------------
      End of String: Y/N
---------------------------------


Commom Operations:
-Creation  
-Insertion (4-cases)
  -Blank Trie
  -New string's prefix is common to another string prefix
  -New strings prefix is already present as complete string
  -String present is already present in trie
-Searching (3-cases)
  -String doesn't exist
  -String exist
  -Prefix of string exist
-Deletion - Always happens from leaf node (4-cases)

uses: 
spelling checker
Auto completion